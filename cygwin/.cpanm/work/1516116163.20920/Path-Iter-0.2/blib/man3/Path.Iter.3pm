.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Path::Iter 3"
.TH Path::Iter 3 "2008-11-24" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Path::Iter \- Simple Efficient Path Iteration
.SH "VERSION"
.IX Header "VERSION"
This document describes Path::Iter version 0.2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Path::Iter;
\&
\&    my $fetch = Path::Iter::get_iterator(\*(Aqfoo\*(Aq);
\&    
\&    while ( my $next_path = $fetch\->() ) {
\&        # do something with $next_path
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Iterate through the contents of a given path without having to build the entire list first.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "\fIPath::Iter::get_iterator()\fP"
.IX Subsection "Path::Iter::get_iterator()"
This returns an code reference that when called returns the next path.
.PP
When there are no more (or a directory can't be opened and you have told it to stop as soon as that happens) it returns false.
.PP
It takes one or more paths to process and an optional argument hashref as the last argument (See \*(L"%ARGS\*(R")
.PP
The paths returned contain the initial argument and its contents (if any).
.PP
Assuming 'foo' in the \s-1SYNOPSIS:\s0
.PP
.Vb 3
\&    is a symlink:   you\*(Aqd iterate through foo
\&    is a file:      you\*(Aqd iterate through foo
\&    is a directory: you\*(Aqd iterate through foo, foo/bar, foo/wop, foo/bar/baz,
.Ve
.ie n .SS "%ARGS"
.el .SS "\f(CW%ARGS\fP"
.IX Subsection "%ARGS"
These are all optional.
.PP
\fIerrors\fR
.IX Subsection "errors"
.PP
This is an array of hashref's where any errors get put.
.PP
.Vb 8
\&    my @err;
\&    my $iter = Path::Iter::get_iterator($path, {errors => \e@err});
\&    while(my $next = $iter\->()) {
\&        ...        
\&    }
\&    if (@err) {
\&        ... handle error ...
\&    }
.Ve
.PP
The keys for each error in the array are as follows:
.PP
.Vb 5
\&    \*(Aqpath\*(Aq     => $path,
\&    \*(Aqfunction\*(Aq => \*(Aqopendir\*(Aq,
\&    \*(Aqargs\*(Aq     => [\e*DIR, $path],
\&    \*(Aqerrno\*(Aq    => int($!), 
\&    \*(Aqerror\*(Aq    => int($!) . ": $!",
.Ve
.PP
\fIstop_when_opendir_fails\fR
.IX Subsection "stop_when_opendir_fails"
.PP
Boolean, when, if true will short circuit the iteration if an \fIopendir()\fR call fails.
.PP
\fIreaddir_handler\fR
.IX Subsection "readdir_handler"
.PP
A coderef to be used to process and return directory contents (\s-1IE\s0 \fIreaddir()\fR results)
.PP
.Vb 2
\&    sub {
\&        my($working_path, @contents) = @_;
\&        
\&        if ($working_path eq \*(Aq.data\*(Aq) {
\&            @contents = grep !/^\e.private\e\-.*/, @contents; # ignore .private\-... files in .data/ dir
\&        }
\&        
\&        return sort { $a cmp $b } @contents; # return what is left in sorted order
\&    }
.Ve
.PP
The first argument is the directory and the rest is its contents.
.PP
The \f(CW@contents\fR have already had the \f(CW$working_path\fR prepended.
.PP
It should return the contents how you wish them to appear in the iteration.
.PP
\fIsymlink_handler\fR
.IX Subsection "symlink_handler"
.PP
By default syminks are not followed.
.PP
This is a coderef that can control how symlinks are handled.
.PP
\&\fB!! \s-1IF YOU ALTER THE DEFAULT BEHAVIOR YOU WILL NEED TO CHECK FOR LINK LOOPS AND INFINITE RECURSION\s0 !!\fR
.PP
It receives two arguments: the path and a boolean of if it was an initial argument or not.
.PP
If it returns true the path will be followed. If the true value is '2' it will be tranformed into its target.
.PP
\&\fB!! \s-1IF YOU ALTER THE DEFAULT BEHAVIOR YOU WILL NEED TO CHECK FOR LINK LOOPS AND INFINITE RECURSION\s0 !!\fR
.PP
Assume we have a link named 'link' whose target is 'path':
.PP
.Vb 5
\&    sub {
\&        my ($path, $is_initial_arg) = @_;
\&        ...
\&        return; # default behavior = link 
\&    }
\&    
\&    sub {
\&        my ($path, $is_initial_arg) = @_;
\&        ...
\&        return 1; # link link/dir link/file link/dir/etc
\&    }
\&    
\&    sub {
\&        my ($path, $is_initial_arg) = @_;
\&        ...
\&        return 2; # path path/dir path/file path/dir/etc
\&    }
.Ve
.PP
\&\fB!! \s-1IF YOU ALTER THE DEFAULT BEHAVIOR YOU WILL NEED TO CHECK FOR LINK LOOPS AND INFINITE RECURSION\s0 !!\fR
.PP
\fIinitial\fR
.IX Subsection "initial"
.PP
This is a hashref used internally as a lookup of initial args as they are after any initialization.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Throws no warnings or errors of its own. You can catch internal opendir failures. See \*(L"errors\*(R" and \*(L"stop_when_opendir_fails\*(R"
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Path::Iter requires no configuration files or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
File::Spec
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-path\-iter@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Daniel Muey  \f(CW\*(C`<http://drmuey.com/cpan_contact.pl>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2008, Daniel Muey \f(CW\*(C`<http://drmuey.com/cpan_contact.pl>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE \*(L"AS IS\*(R" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.\s0
.PP
\&\s-1IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE\s0 (\s-1INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE\s0), \s-1EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.\s0
